<!-- <?xml version="1.0" ?>
<sdf version="1.6">
  <model name="line_following_robot">
    <pose>0 0 0 0 0 0</pose> -->

    <!-- Base Link -->
    <!-- <link name="base_link">
      <pose>0 0 0.05 0 0 0</pose>
      <inertial>
         <mass>1.0</mass>
         <inertia>
            <ixx>0.01</ixx>
            <iyy>0.01</iyy>
            <izz>0.01</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
         </inertia>
      </inertial>
      <collision name="base_collision">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/waffle_pi_base.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </collision>
      <visual name="base_visual">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/waffle_pi_base.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </visual>
    </link> -->

    <!-- Left Wheel -->
    <!-- <link name="left_wheel">
      <pose>0 0.15 0.05 0 0 0</pose>
      <inertial>
         <mass>0.2</mass>
         <inertia>
            <ixx>0.001</ixx>
            <iyy>0.001</iyy>
            <izz>0.001</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
         </inertia>
      </inertial>
      <collision name="left_wheel_collision">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/tire.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </collision>
      <visual name="left_wheel_visual">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/tire.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </visual>
    </link> -->

    <!-- Right Wheel -->
    <!-- <link name="right_wheel">
      <pose>0 -0.15 0.05 0 0 0</pose>
      <inertial>
         <mass>0.2</mass>
         <inertia>
            <ixx>0.001</ixx>
            <iyy>0.001</iyy>
            <izz>0.001</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
         </inertia>
      </inertial>
      <collision name="right_wheel_collision">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/tire.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </collision>
      <visual name="right_wheel_visual">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <mesh>
             <uri>model://line_following_robot/tire.dae</uri>
             <scale>1 1 1</scale>
           </mesh>
         </geometry>
      </visual>
    </link> -->

    <!-- Camera Link with Sensor -->
    <!-- <link name="camera_link">
      <pose>0 0 0.15 0 -0.785 0</pose>
      <inertial>
         <mass>0.05</mass>
         <inertia>
            <ixx>0.0001</ixx>
            <iyy>0.0001</iyy>
            <izz>0.0001</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
         </inertia>
      </inertial>
      <collision name="camera_collision">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <box>
             <size>0.1 0.1 0.1</size>
           </box>
         </geometry>
      </collision>
      <visual name="camera_visual">
         <pose>0 0 0 0 0 0</pose>
         <geometry>
           <box>
             <size>0.1 0.1 0.1</size>
           </box>
         </geometry>
         <material>
           <ambient>0 0 1 1</ambient>
           <diffuse>0 0 1 1</diffuse>
         </material>
      </visual> -->
      <!-- Add the Camera Sensor here -->
      <!-- <sensor type="camera" name="camera_sensor">
        <always_on>true</always_on>
        <update_rate>30</update_rate>
        <camera>
          <horizontal_fov>1.047</horizontal_fov>
          <image>
            <width>320</width>
            <height>240</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
        </camera>
        <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
          <ros>
            <remapping>image_raw:=camera/image_raw</remapping>
            <remapping>camera_info:=camera/camera_info</remapping>
          </ros>
          <frame_name>camera_link</frame_name>
        </plugin>
      </sensor>
    </link> -->

    <!-- Joints -->
    <!-- <joint name="left_wheel_joint" type="revolute">
      <parent>base_link</parent>
      <child>left_wheel</child>
      <pose>0 0.15 0.05 0 0 0</pose>
      <axis>
         <xyz>0 0 1</xyz>
         <limit>
           <lower>-1e16</lower>
           <upper>1e16</upper>
           <effort>1e5</effort>
           <velocity>1000</velocity>
         </limit>
      </axis>
    </joint>

    <joint name="right_wheel_joint" type="revolute">
      <parent>base_link</parent>
      <child>right_wheel</child>
      <pose>0 -0.15 0.05 0 0 0</pose>
      <axis>
         <xyz>0 0 1</xyz>
         <limit>
           <lower>-1e16</lower>
           <upper>1e16</upper>
           <effort>1e5</effort>
           <velocity>1000</velocity>
         </limit>
      </axis>
    </joint> -->

    <!-- Diff Drive Plugin -->
    <!-- <plugin name="diff_drive_controller" filename="libgazebo_ros_diff_drive.so"> -->
      <!-- Reference joint names must match our SDF joint names -->
      <!-- <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <wheel_separation>0.3</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>
      <torque>30</torque>
      <command_topic>cmd_vel</command_topic>
      <odom_topic>odom</odom_topic>
      <odom_frame>odom</odom_frame>
      <robot_base_frame>base_link</robot_base_frame>
      <update_rate>30</update_rate>
    </plugin> -->

    <!-- Joint State Publisher Plugin -->
   <!-- <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
  <update_rate>30</update_rate>
  <joint_name>left_wheel_joint right_wheel_joint</joint_name>
</plugin>

  </model>
</sdf> -->



<?xml version="1.0" ?>
<sdf version="1.5">
  <model name="line_following_robot">  
    <pose>0 0 0 0 0 0</pose>

    <link name="base_footprint"/>

    <link name="base_link">
      <inertial>
        <pose>-0.064 0 0.048 0 0 0</pose>
        <inertia>
          <ixx>0.042111447</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.042111447</iyy>
          <iyz>0</iyz>
          <izz>0.075254874</izz>
        </inertia>
        <mass>1.3729096</mass>
      </inertial>

      <collision name="base_collision">
        <pose>-0.064 0 0.048 0 0 0</pose>
        <geometry>
          <box>
            <size>0.265 0.265 0.089</size>
          </box>
        </geometry>
      </collision>

      <visual name="base_visual">
        <pose>-0.064 0 0 0 0 0</pose>
        <geometry>
          <mesh>
            <!-- Updated mesh URI for chassis -->
            <uri>model://line_following_robot/waffle_pi_base.dae</uri>
            <scale>1 1 1</scale>
          </mesh>
        </geometry>
        <!-- Material reference removed so that default colors are used -->
      </visual>
    </link>

    <link name="imu_link">
      <sensor name="tb3_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>200</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.0002</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.0002</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.0002</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.017</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.017</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0</mean>
                <stddev>0.017</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="turtlebot3_imu" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <remapping>~/out:=imu</remapping>
          </ros>
        </plugin>
      </sensor>
    </link>

    <!-- LiDAR sensor (base_scan) is commented out since it's not used in this line-following robot -->
    <!--
    <link name="base_scan">
      <inertial>
        <pose>-0.052 0 0.111 0 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.114</mass>
      </inertial>
      <collision name="lidar_sensor_collision">
        <pose>-0.052 0 0.111 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.0508</radius>
            <length>0.055</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="lidar_sensor_visual">
        <pose>-0.064 0 0.121 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://line_following_robot/lds_smooth.dae</uri>
            <scale>1 1 1</scale>
          </mesh>
        </geometry>
      </visual>
      <sensor name="hls_lfcd_lds" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <pose>-0.064 0 0.121 0 0 0</pose>
        <update_rate>5</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1.0</resolution>
              <min_angle>0.0</min_angle>
              <max_angle>6.28</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.12</min>
            <max>3.5</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="turtlebot3_laserscan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>base_scan</frame_name>
        </plugin>
      </sensor>
    </link>
    -->

    <link name="wheel_left_link">
      <inertial>
        <pose>0 0.144 0.023 -1.57 0 0</pose>
        <inertia>
          <ixx>0.0018158194</ixx>
          <ixy>-9.3392e-12</ixy>
          <ixz>1.04909e-11</ixz>
          <iyy>0.0032922126</iyy>
          <iyz>5.75694e-11</iyz>
          <izz>0.0018158194</izz>
        </inertia>
        <mass>0.02849894</mass>
      </inertial>
      <collision name="wheel_left_collision">
        <pose>0 0.144 0.023 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.033</radius>
            <length>0.018</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="wheel_left_visual">
        <pose>0 0.144 0.023 0 0 0</pose>
        <geometry>
          <mesh>
            <!-- Updated mesh URI for tire -->
            <uri>model://line_following_robot/tire.dae</uri>
            <scale>1 1 1</scale>
          </mesh>
        </geometry>
      </visual>
    </link>

    <link name="wheel_right_link">
      <inertial>
        <pose>0 -0.144 0.023 -1.57 0 0</pose>
        <inertia>
          <ixx>0.0018158194</ixx>
          <ixy>-9.3392e-12</ixy>
          <ixz>1.04909e-11</ixz>
          <iyy>0.0032922126</iyy>
          <iyz>5.75694e-11</iyz>
          <izz>0.0018158194</izz>
        </inertia>
        <mass>0.02849894</mass>
      </inertial>
      <collision name="wheel_right_collision">
        <pose>0 -0.144 0.023 -1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.033</radius>
            <length>0.018</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="wheel_right_visual">
        <pose>0 -0.144 0.023 0 0 0</pose>
        <geometry>
          <mesh>
            <!-- Updated mesh URI for tire -->
            <uri>model://line_following_robot/tire.dae</uri>
            <scale>1 1 1</scale>
          </mesh>
        </geometry>
      </visual>
    </link>

    <link name="caster_back_right_link">
      <pose>-0.177 -0.064 -0.004 -1.57 0 0</pose>
      <inertial>
        <mass>0.001</mass>
        <inertia>
          <ixx>0.00001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.00001</iyy>
          <iyz>0</iyz>
          <izz>0.00001</izz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <sphere>
            <radius>0.005</radius>
          </sphere>
        </geometry>
      </collision>
    </link>

    <link name="caster_back_left_link">
      <pose>-0.177 0.064 -0.004 -1.57 0 0</pose>
      <inertial>
        <mass>0.001</mass>
        <inertia>
          <ixx>0.00001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.00001</iyy>
          <iyz>0</iyz>
          <izz>0.00001</izz>
        </inertia>
      </inertial>
      <collision name="collision">
        <geometry>
          <sphere>
            <radius>0.005</radius>
          </sphere>
        </geometry>
      </collision>
    </link>

    <!-- Updated Camera Setup -->
    <link name="camera_link">
      <!-- This link serves as the mounting point for the camera sensor -->
    </link>

    <link name="camera_rgb_optical_frame">
      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.001</iyy>
          <iyz>0</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.035</mass>
      </inertial>
      <pose>0 0 0 0 0 0</pose>
      <sensor name="camera" type="camera">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>30</update_rate>
        <camera name="picam">
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.03</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_driver" filename="libgazebo_ros_camera.so">
          <ros>
            <!-- Remappings can be set here if needed -->
          </ros>
        </plugin>
      </sensor>
    </link>

    <joint name="camera_joint" type="fixed">
      <parent>base_link</parent>
      <child>camera_link</child>
      <pose>0.1 0 0.2 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="camera_rgb_joint" type="fixed">
      <parent>camera_link</parent>
      <child>camera_rgb_optical_frame</child>
      <pose>0 0 0 0 -0.785 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="base_joint" type="fixed">
      <parent>base_footprint</parent>
      <child>base_link</child>
      <pose>0 0 0.01 0 0 0</pose>
    </joint>

    <joint name="wheel_left_joint" type="revolute">
      <parent>base_link</parent>
      <child>wheel_left_link</child>
      <pose>0 0.144 0.023 -1.57 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="wheel_right_joint" type="revolute">
      <parent>base_link</parent>
      <child>wheel_right_link</child>
      <pose>0 -0.144 0.023 -1.57 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <joint name="caster_back_right_joint" type="ball">
      <parent>base_link</parent>
      <child>caster_back_right_link</child>
    </joint>

    <joint name="caster_back_left_joint" type="ball">
      <parent>base_link</parent>
      <child>caster_back_left_link</child>
    </joint>

    <joint name="imu_joint" type="fixed">
      <parent>base_link</parent>
      <child>imu_link</child>
      <pose>-0.032 0 0.068 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
      </axis>
    </joint>

    <plugin name="turtlebot3_diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <remapping>/tf:=tf</remapping>
      </ros>
      <update_rate>30</update_rate>
      <left_joint>wheel_left_joint</left_joint>
      <right_joint>wheel_right_joint</right_joint>
      <wheel_separation>0.287</wheel_separation>
      <wheel_diameter>0.066</wheel_diameter>
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <command_topic>cmd_vel</command_topic>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      <odometry_source>0</odometry_source>
    </plugin>

    <plugin name="turtlebot3_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>wheel_left_joint</joint_name>
      <joint_name>wheel_right_joint</joint_name>
    </plugin>
  </model>
</sdf>
